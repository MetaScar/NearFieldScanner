%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A simple program that will take as an input a struct generated by the
% "moveGUI.mlapp" app and transform into the far field using the FFT.
% Will not time gate. Time gate must be done through "moveGUI.mlapp".
%
% To use, assign "filename" to the name of your file located in the 
% "Data" directory located in "NearFieldScanner/PostProcessing/Data".
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clc; clear; close all

filename = "";

structy = load("../Data/" + filename);
structy = structy.tempStructy;

% put data in SI units
x = structy.x / 1000;
y = structy.y / 1000;
s = structy.s;
freq = structy.frequency;

x_unique = unique(x);
y_unique = unique(y);
[x_mesh, y_mesh] = meshgrid(x_unique, y_unique);

S = griddata(x, y, s, x_mesh, y_mesh, 'linear');

S_far = fftshift(fft2(ifftshift(S)));

c = 299792458;
lambda = (c/freq);
k0 = (2*pi)/ lambda;
K = (2*pi) / (x_unique(2)-x_unique(1));
kx = linspace(-K/2, K/2, length(x_unique));
u = kx/k0;
v = u;

u_start = find_nearest_index(u, -1);
while u(u_start) < -1
    u_start = u_start + 1;
end

u_end = find_nearest_index(u, 1);
while u(u_end) > 1
    u_end = u_end - 1;
end

u = u(u_start:u_end);
v = v(u_start:u_end);

S_far = S_far(u_start:u_end, u_start:u_end);

Mag_far = 20*log10(abs(S_far));
Phase_far = angle(S_far) * (180/pi);

% Far Magnitude Plot
figure
pcolor(u, v, Mag_far);
colormap("jet");
colorbar;
xlabel('u');
ylabel('v');
axis equal
title('S21 FFT Uncompensated Far Magnitude @ ' + string(freq/1e9) + ' GHz (dB)');
shading('interp');

% Far Phase Plot
figure
pcolor(u, v, Phase_far);
colormap("hsv");
colorbar;
xlabel('u');
ylabel('v');
axis equal
title('S21 FFT Uncompensated Far Phase @ ' + string(freq/1e9) + ' GHz (dB)');
shading('interp');

function index = find_nearest_index(x, num)
[~,index] = min(abs(x-num));
end